<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Step1 : 기본설정 -->
<!-- 	<security:http>
		<security:intercept-url pattern="/security1/**" access="hasRole('USER')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<security:form-login/>
		<security:logout/>
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kosmo" password="1234" authorities="ROLE_USER"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> -->
	
	<!-- Step2 : 로그인 화면 커스텀하기 -->
	<!-- 
	<security:http>
		<security:intercept-url pattern="/security2/login.do" access="permitAll"/>
		<security:intercept-url pattern="/security2/admin/**" access="hasRole('ADMIN')"/>
		<security:intercept-url pattern="/security2/**" access="hasAnyRole('USER', 'ADMIN')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
	
	<security:form-login login-page="/security2/login.do" default-target-url="/security2/index.do" 
		authentication-failure-url="/security2/login.do?error" username-parameter="id" password-parameter="pass"/>
	<security:logout logout-url="/security2/logout" logout-success-url="/security2/index.do"/>
	<security:access-denied-handler error-page="/security2/accessDenied.do"/>
	</security:http>
	 -->
	<!-- 
	

	security:http
	
	security:intercept-url -> 감시해야할 url과 접근가능한 권한을 정의
		
		pattern -> 권한을 적용할 URL요청명 
		access -> 접근권한 설정
			hasRole('권한명') : 해당권한만 접근가능
			hasAnyRole('권한명1, 권한명2 ... ') : 여러 권한중 1개만 취득하면 접근 가능
			permitAll : 누구나 접근 가능
			
	
	security:form-login -> 로그인페이지에 대한 요소를 커스터마이징
	
		login-page : 커스텀 로그인 페이지를 지정
		default-target-url : 로그인 후 기본으로 보여지는 패키지
			특정 페이지를 클릭 후 로그인하면 해당 페이지가 보여짐.
		authentication-failure-url : 로그인 실패시 보여질 페이지
		username-parameter : 로그인 시 사용할 아이디명(name값)
		password-parameter : 로그인 시 사용할 패스워드명(name값)
		
	security:logout -> 로그아웃을 커스터마이징
	
		logout-url : 로그아웃시 사용될 URL 요청명
		logout-success-url : 로그아웃에 성공했을 때 이동할 페이지
		
	security:access-denied-handler
		
		error-page : 로그인 하였으나 권한이 없는 페이지를 요청할 경우 이동할 페이지
	
	※ 권한부여를 위한 권한명을 지정할 때 일반적으로 "ROLE_명칭" 형태로 제작한다.
		
		ex) ROLE_ADMIN 등..

	 -->
	 
	<!-- 	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kosmo_user" password="1111" authorities="ROLE_USER"/>
				<security:user name="kosmo_admin" password="2222" authorities="ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	 -->
	
	<!-- Step3 : 로그인화면 커스텀 & 권한 DB 처리 -->
	
	<security:http>
		<security:intercept-url pattern="/security2/login.do" access="permitAll"/>
		<security:intercept-url pattern="/security2/admin/**" access="hasRole('ADMIN')"/>
		<security:intercept-url pattern="/security2/**" access="hasAnyRole('USER', 'ADMIN')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
	
	<security:form-login login-page="/security2/login.do" default-target-url="/security2/index.do" 
		authentication-failure-url="/security2/login.do?error" username-parameter="id" password-parameter="pass"/>
	<security:logout logout-url="/security2/logout" logout-success-url="/security2/index.do"/>
	<security:access-denied-handler error-page="/security2/accessDenied.do"/>
	</security:http>

	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service 
				data-source-ref="dataSource" 
				role-prefix="ROLE_"
				users-by-username-query="SELECT user_id, user_pw, enabled FROM security_admin WHERE user_id = ?"
				authorities-by-username-query="SELECT user_id, authority FROM security_admin WHERE user_id = ?"
			/>
		</security:authentication-provider>
	</security:authentication-manager>	
	
	<!-- 
	
	security:jdbc-user-service : 권한부분을 JDBC를 통해 DB연동
	
		data-source-ref : 데이터베이스 연결을 나타내는 dataSource. 해당 연결은 servlet-context.xml에서 할 수 없고
			반드시 root-context.xml이나 security-context.xml에서 빈을 생성해야 한다.
		role-prefix : "ROLE_"와 같은 권한명 앞에 붙는 접두어(prefix)를 지정한다.
			만약 해당 항목을 "ROLE_"로 지정하면 DB에는 "USER"처럼 접두어를 제거한 상태로 입력해야 한다.
		user-by-username-query : 아이디를 이용하여 사용자 정보를 가져오는 쿼리문을 작성한다.
		authorites-by-username-query : 아이디를 이용하여 권한정보를 가져오는 쿼리문을 작성한다.
		
		
	
	
	 -->
	
</beans>
