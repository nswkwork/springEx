<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- 
	
	AOP를 사용하기 위해 xmlns:aop 네임스페이스를 추가한다.
	해당 파일 하단의 Namespaces탭을 활용하면 된다. (맨 위 버전)
	 -->
	
	<!-- 공통기능을 수행할 클래스의 빈을 생성함 -->
	<bean id="commonAop" class="AOP.CommonAOP1"></bean>
	
	<!-- AOP설정(공통기능설정) -->
	<aop:config>
		<!-- 공통기능설정 : 이미 생성된 commonAop를 참조하고 아이디는 logger로 지정하겠다는 의미 -->
		<aop:aspect id="logger" ref="commonAop">
			<!-- pointcut의 범위는 AOP패키지의 모든 클래스의 메소드에 공통기능을 적용하겠다는 선언 -->
			<aop:pointcut expression="within(AOP.*)" id="publicMethod"/>
			<!-- Advice는 "around"타입을 이용하고 그때 logViewAOP 메소드를 공통기능으로 사용하겠다는 선언 -->
			<aop:around pointcut-ref="publicMethod" method="logViewAOP"/>
		</aop:aspect>
	</aop:config>
	
<!-- 
Advice의 종류

before : 메소드 실행전에 advice실행
after-returning : 정상적으로 메소드 실행후 advice 실행
after-throwing : 메소드 실행중 exception 발생시 advice실행 **** 수정 ****

after : 메소드 실행중 exception 발생여부와 상관없이 advice 실행

around : 메소드 실행전과 실행후 및 exception발생시 advice실행 (가장 사용빈도가 높음)

 -->
	<!-- 빈 생성 -->
	<bean id="student" class="AOP.ObjStudent">
		<property name="name" value="홍길동"/>
		<property name="age" value="99"/>
		<property name="major" value="도둑질"/>
		<property name="gradeNum" value="6"/>
	</bean>

	<bean id="salesMan" class="AOP.ObjSalesMan">
		<property name="name" value="장그래"/>
		<property name="age" value="35"/>
		<property name="job" value="영업3팀"/>
		<property name="salary" value="450"/>
	</bean>	
</beans>
